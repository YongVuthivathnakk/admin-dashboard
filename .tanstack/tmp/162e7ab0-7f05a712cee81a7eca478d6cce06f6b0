/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DashboardIndexRouteImport } from './routes/dashboard/index'
import { Route as DashboardRoutesRouteImport } from './routes/dashboard/routes'
import { Route as DashboardSettingIndexRouteImport } from './routes/dashboard/setting/index'
import { Route as DashboardSettingAppearanceRouteImport } from './routes/dashboard/setting/appearance'
import { Route as DashboardSettingAccountRouteImport } from './routes/dashboard/setting/account'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardRoutesRoute = DashboardRoutesRouteImport.update({
  id: '/routes',
  path: '/routes',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardSettingIndexRoute = DashboardSettingIndexRouteImport.update({
  id: '/setting/',
  path: '/setting/',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardSettingAppearanceRoute =
  DashboardSettingAppearanceRouteImport.update({
    id: '/setting/appearance',
    path: '/setting/appearance',
    getParentRoute: () => DashboardRoute,
  } as any)
const DashboardSettingAccountRoute = DashboardSettingAccountRouteImport.update({
  id: '/setting/account',
  path: '/setting/account',
  getParentRoute: () => DashboardRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/login': typeof LoginRoute
  '/dashboard/routes': typeof DashboardRoutesRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/dashboard/setting/account': typeof DashboardSettingAccountRoute
  '/dashboard/setting/appearance': typeof DashboardSettingAppearanceRoute
  '/dashboard/setting': typeof DashboardSettingIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/dashboard/routes': typeof DashboardRoutesRoute
  '/dashboard': typeof DashboardIndexRoute
  '/dashboard/setting/account': typeof DashboardSettingAccountRoute
  '/dashboard/setting/appearance': typeof DashboardSettingAppearanceRoute
  '/dashboard/setting': typeof DashboardSettingIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/login': typeof LoginRoute
  '/dashboard/routes': typeof DashboardRoutesRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/dashboard/setting/account': typeof DashboardSettingAccountRoute
  '/dashboard/setting/appearance': typeof DashboardSettingAppearanceRoute
  '/dashboard/setting/': typeof DashboardSettingIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/login'
    | '/dashboard/routes'
    | '/dashboard/'
    | '/dashboard/setting/account'
    | '/dashboard/setting/appearance'
    | '/dashboard/setting'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/dashboard/routes'
    | '/dashboard'
    | '/dashboard/setting/account'
    | '/dashboard/setting/appearance'
    | '/dashboard/setting'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/login'
    | '/dashboard/routes'
    | '/dashboard/'
    | '/dashboard/setting/account'
    | '/dashboard/setting/appearance'
    | '/dashboard/setting/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRouteWithChildren
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/routes': {
      id: '/dashboard/routes'
      path: '/routes'
      fullPath: '/dashboard/routes'
      preLoaderRoute: typeof DashboardRoutesRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/setting/': {
      id: '/dashboard/setting/'
      path: '/setting'
      fullPath: '/dashboard/setting'
      preLoaderRoute: typeof DashboardSettingIndexRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/setting/appearance': {
      id: '/dashboard/setting/appearance'
      path: '/setting/appearance'
      fullPath: '/dashboard/setting/appearance'
      preLoaderRoute: typeof DashboardSettingAppearanceRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/setting/account': {
      id: '/dashboard/setting/account'
      path: '/setting/account'
      fullPath: '/dashboard/setting/account'
      preLoaderRoute: typeof DashboardSettingAccountRouteImport
      parentRoute: typeof DashboardRoute
    }
  }
}

interface DashboardRouteChildren {
  DashboardRoutesRoute: typeof DashboardRoutesRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
  DashboardSettingAccountRoute: typeof DashboardSettingAccountRoute
  DashboardSettingAppearanceRoute: typeof DashboardSettingAppearanceRoute
  DashboardSettingIndexRoute: typeof DashboardSettingIndexRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardRoutesRoute: DashboardRoutesRoute,
  DashboardIndexRoute: DashboardIndexRoute,
  DashboardSettingAccountRoute: DashboardSettingAccountRoute,
  DashboardSettingAppearanceRoute: DashboardSettingAppearanceRoute,
  DashboardSettingIndexRoute: DashboardSettingIndexRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
